      subroutine adypres( adypuprime, adypdelta )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.11   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer maxs
      parameter ( maxs = 2 )

C==============================================
C define common blocks
C==============================================
      common /ppar2/ np, ns, ax, ay, acoef, bcoef, dx, dy, fpi, diff, 
     $cox, coy, mx, my, mxns
      double precision acoef(maxs,maxs)
      double precision ax
      double precision ay
      double precision bcoef(maxs)
      double precision cox(maxs)
      double precision coy(maxs)
      double precision diff(maxs)
      double precision dx
      double precision dy
      double precision fpi
      integer mx
      integer mxns
      integer my
      integer np
      integer ns

C==============================================
C define arguments
C==============================================
      double precision adypdelta(*)
      double precision adypuprime(*)

C==============================================
C define local variables
C==============================================
      integer i
      integer ic0
      integer ici
      integer ip1
      integer iyoff
      integer jx
      integer jy

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do jy = my, 1, -1
        iyoff = mxns*(jy-1)
        do jx = mx, 1, -1
          ic0 = iyoff+ns*(jx-1)
          do i = ns, 1, -1
            ici = ic0+i
            if (i .gt. np) then
              adypdelta(ici) = -adypdelta(ici)
            else
              adypuprime(ici) = adypuprime(ici)+adypdelta(ici)
              adypdelta(ici) = -adypdelta(ici)
            endif
          end do
        end do
      end do

      end


