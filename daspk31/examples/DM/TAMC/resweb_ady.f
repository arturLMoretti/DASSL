C                           DISCLAIMER
C
C   This file was generated by TAMC version 5.3.2
C
C   THE AUTHOR DOES NOT MAKE  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES
C   ANY LEGAL LIABILITY OR  RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
C   OR USEFULNESS  OF ANY INFORMATION OR PROCESS  DISCLOSED, OR REPRESENTS
C   THAT ITS USE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
C
C   THIS CODE IS FOR NON-PROFIT-ORIENTED ACADEMIC RESEARCH AND EDUCATION
C   ONLY.  ANY COMMERCIAL OR OTHER PROFIT-ORIENTED USE OR  EVALUATION IS
C   STRICTLY  FORBIDDEN.  PASSING  THIS CODE  TO  ANY THIRD  PARTY IS  NOT
C   ALLOWED.
C
C   FOR COMMERCIAL OR  OTHER PROFIT-ORIENTED APPLICATIONS PLEASE CONTACT
C   info@FastOpt.com
C
      subroutine adydaxpy( n, da, dx, incx, incy, adyda, adydy )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define common blocks
C==============================================
C==============================================
C define arguments
C==============================================
      double precision adyda
      double precision adydy(1)
      double precision da
      double precision dx(1)
      integer incx
      integer incy
      integer n

C==============================================
C define local variables
C==============================================
      integer i
      integer i1
      integer ix
      integer iy
      integer m
      integer mp1

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (n .le. 0) then
      else
        if (da .eq. 0.d0) then
        else
          if (incx .eq. 1 .and. incy .eq. 1) then
            m = mod(n,4)
            if (m .eq. 0) then
              mp1 = m+1
              do i = mp1, n, 4
                adyda = adyda+adydy(i+3)*dx(i+3)
                adyda = adyda+adydy(i+2)*dx(i+2)
                adyda = adyda+adydy(i+1)*dx(i+1)
                adyda = adyda+adydy(i)*dx(i)
              end do
            else
              if (n .lt. 4) then
              else
                mp1 = m+1
                do i = mp1, n, 4
                  adyda = adyda+adydy(i+3)*dx(i+3)
                  adyda = adyda+adydy(i+2)*dx(i+2)
                  adyda = adyda+adydy(i+1)*dx(i+1)
                  adyda = adyda+adydy(i)*dx(i)
                end do
              endif
              do i = 1, m
                adyda = adyda+adydy(i)*dx(i)
              end do
            endif
          else
            do i = n, 1, -1
              ix = 1
              iy = 1
              if (incx .lt. 0) then
                ix = ((-n)+1)*incx+1
              endif
              if (incy .lt. 0) then
                iy = ((-n)+1)*incy+1
              endif
              do i1 = 1, i-1
                ix = ix+incx
                iy = iy+incy
              end do
              adyda = adyda+adydy(iy)*dx(ix)
            end do
          endif
        endif
      endif

      end


      subroutine adyfweb( cc, rpar, senpar, adycc, adycrate, adyrpar )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer maxs
      parameter ( maxs = 2 )

C==============================================
C define common blocks
C==============================================
      common /ppar2/ np, ns, ax, ay, acoef, bcoef, dx, dy, fpi, diff, 
     $cox, coy, mx, my, mxns
      double precision acoef(maxs,maxs)
      double precision ax
      double precision ay
      double precision bcoef(maxs)
      double precision cox(maxs)
      double precision coy(maxs)
      double precision diff(maxs)
      double precision dx
      double precision dy
      double precision fpi
      integer mx
      integer mxns
      integer my
      integer np
      integer ns

C==============================================
C define arguments
C==============================================
      double precision adycc(*)
      double precision adycrate(*)
      double precision adyrpar(*)
      double precision cc(*)
      double precision rpar(*)
      double precision senpar(*)

C==============================================
C define local variables
C==============================================
      double precision adydcxli
      double precision adydcxui
      double precision adydcyli
      double precision adydcyui
      integer i
      integer ic
      integer ici
      integer idxl
      integer idxu
      integer idyl
      integer idyu
      integer iyoff
      integer jx
      integer jy

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adydcxli = 0.d0
      adydcxui = 0.d0
      adydcyli = 0.d0
      adydcyui = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do jy = my, 1, -1
        iyoff = mxns*(jy-1)
        idyu = mxns
        if (jy .eq. my) then
          idyu = -mxns
        endif
        idyl = mxns
        if (jy .eq. 1) then
          idyl = -mxns
        endif
        do jx = mx, 1, -1
          ic = iyoff+ns*(jx-1)+1
          idxu = ns
          if (jx .eq. mx) then
            idxu = -ns
          endif
          idxl = ns
          if (jx .eq. 1) then
            idxl = -ns
          endif
          do i = 1, ns
            adydcxli = 0.d0
            adydcxui = 0.d0
            adydcyli = 0.d0
            adydcyui = 0.d0
            ici = ic+i-1
            adydcxli = adydcxli-adycrate(ici)*cox(i)
            adydcxui = adydcxui+adycrate(ici)*cox(i)
            adydcyli = adydcyli-adycrate(ici)*coy(i)
            adydcyui = adydcyui+adycrate(ici)*coy(i)
            adyrpar(ici) = adyrpar(ici)+adycrate(ici)
            adycrate(ici) = 0.d0
            adycc(ici+idxu) = adycc(ici+idxu)+adydcxui
            adycc(ici) = adycc(ici)-adydcxui
            adydcxui = 0.d0
            adycc(ici-idxl) = adycc(ici-idxl)-adydcxli
            adycc(ici) = adycc(ici)+adydcxli
            adydcxli = 0.d0
            adycc(ici+idyu) = adycc(ici+idyu)+adydcyui
            adycc(ici) = adycc(ici)-adydcyui
            adydcyui = 0.d0
            adycc(ici-idyl) = adycc(ici-idyl)-adydcyli
            adycc(ici) = adycc(ici)+adydcyli
            adydcyli = 0.d0
          end do
          call adywebr( jx,jy,cc(ic),rpar(ic),senpar,adycc(ic),
     $adyrpar(ic) )
        end do
      end do

      end


      subroutine adyres( u, rpar, senpar, adyu, adydelta, adyrpar )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer maxs
      parameter ( maxs = 2 )

C==============================================
C define common blocks
C==============================================
      common /ppar2/ np, ns, ax, ay, acoef, bcoef, dx, dy, fpi, diff, 
     $cox, coy, mx, my, mxns
      double precision acoef(maxs,maxs)
      double precision ax
      double precision ay
      double precision bcoef(maxs)
      double precision cox(maxs)
      double precision coy(maxs)
      double precision diff(maxs)
      double precision dx
      double precision dy
      double precision fpi
      integer mx
      integer mxns
      integer my
      integer np
      integer ns

C==============================================
C define arguments
C==============================================
      double precision adydelta(*)
      double precision adyrpar(*)
      double precision adyu(*)
      double precision rpar(*)
      double precision senpar(*)
      double precision u(*)

C==============================================
C define local variables
C==============================================
      integer i
      integer ic0
      integer ici
      integer iyoff
      integer jx
      integer jy

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do jy = my, 1, -1
        iyoff = mxns*(jy-1)
        do jx = mx, 1, -1
          ic0 = iyoff+ns*(jx-1)
          do i = ns, 1, -1
            ici = ic0+i
            if (i .gt. np) then
              adydelta(ici) = -adydelta(ici)
            else
              adydelta(ici) = -adydelta(ici)
            endif
          end do
        end do
      end do
      call adyfweb( u,rpar,senpar,adyu,adydelta,adyrpar )

      end


      subroutine adywebr( jx, jy, c, crate, senpar, adyc, adycrate )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.3.2    **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer maxs
      parameter ( maxs = 2 )

C==============================================
C define common blocks
C==============================================
      common /ppar2/ np, ns, ax, ay, acoef, bcoef, dx, dy, fpi, diff, 
     $cox, coy, mx, my, mxns
      double precision acoef(maxs,maxs)
      double precision ax
      double precision ay
      double precision bcoef(maxs)
      double precision cox(maxs)
      double precision coy(maxs)
      double precision diff(maxs)
      double precision dx
      double precision dy
      double precision fpi
      integer mx
      integer mxns
      integer my
      integer np
      integer ns

C==============================================
C define arguments
C==============================================
      double precision adyc(*)
      double precision adycrate(*)
      double precision c(*)
      double precision crate(*)
      integer jx
      integer jy
      double precision senpar(*)

C==============================================
C define local variables
C==============================================
      double precision alph
      double precision beta
      double precision fac
      integer i
      integer j
      double precision x
      double precision y

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      alph = senpar(1)
      beta = senpar(2)
      y = real(jy-1)*dy
      x = real(jx-1)*dx
      do i = 1, ns
        crate(i) = 0.d0
      end do
      do j = 1, ns
        call daxpy( ns,c(j),acoef(1,j),1,crate,1 )
      end do
      fac = 1.d0+alph*x*y+beta*sin(fpi*x)*sin(fpi*y)
      do i = 1, ns
        adyc(i) = adyc(i)+adycrate(i)*(bcoef(i)*fac+crate(i))
        adycrate(i) = adycrate(i)*c(i)
      end do
      do j = ns, 1, -1
        call adydaxpy( ns,c(j),acoef(1,j),1,1,adyc(j),adycrate )
      end do
      do i = 1, ns
        adycrate(i) = 0.d0
      end do

      end


